
mixin storybuilder(roomName)
    style.
        div.hiddenroomtitle{ display:none; }
        div.storybuilder {
            height: 100%;
        }
        div.storyTurn{
            float: left;
            width:20%;
            text-overflow: ellipsis;
            white-space: nowrap;
            overflow: hidden;
        }
        div.storyOptions{
            float: right;
            width: 70%;
        }
        div.storylog{
            clear: both;
            height: 90%;
            width: 100%;
            overflow-y: scroll;
            border: 1px solid black;
        }
        div.story {
            width: 100%;
            word-wrap: break-word;
        }
        p.storyErrorMessage {
            font-size: 0.5em;
        }
        div.skipTurn {
            float: right;
        }
        div.undoStory {
            float: left;
        }
        div.undoStory form {
            float: left;
        }
        div.skipTurn form {
            float: right;
        }
        div.skipTurn div.voteResults {
            float: left;
        }
        div.undoStory div.voteResults {
            float: right;
        }

    div(class='hiddenroomtitle',data-room!=roomName)= roomName
    div.storybuilder
        div.storyTurn
        div.storyOptions
            div.skipTurn
                div.voteResults
                form
                    button.vote(data-vote='vote skip turn') vote skip
            div.undoStory
                div.voteResults
                form
                    button.vote(data-vote='vote undo story') vote undo
        div.storylog
            div.story
        div.storyinput
            form
                input#txtStory(type="text", autocomplete="off")
                button#btnStory(type="submit") >
            p.storyErrorMessage

    script.
        // skip turn vote
        $('button.vote').click(function(event){
            event.preventDefault();
            socket.emit('vote',
                {roomName: $('div.hiddenroomtitle').data('room'),
                    voteType: $(this).data('vote')});
            return false;
        });
        socket.on('vote skip turn', function(data){
            if (data.vote === '0') {
                $('div.skipTurn div.voteResults').text("");
                return;
            }
            $('div.skipTurn div.voteResults').text(data.votes+'/'+data.total);
        });
        socket.on('vote undo story', function(data){
            if (data.vote === '0') {
                $('div.skipTurn div.voteResults').text("");
                return;
            }
            $('div.undoStory div.voteResults').text(data.votes+'/'+data.total);
        });

        // story
        socket.emit("refresh story", {roomName: $('div.hiddenroomtitle').data('room')});
        var txtStory = $('#txtStory');
        $('div.storyinput form').submit(function() {
            socket.emit('story',
                {msg: txtStory.val(),
                roomName: $('div.hiddenroomtitle').html()}
            );
            $('p.storyErrorMessage').html("");
            txtStory.val("");
            return false;
        });
        socket.on('story',function(data){
            // reset error message
            $('p.errorMessage').html("");

            $('div.story').html(constructStoryHtml(data.story));
            $('div.storylog').scrollTop($('div.story').height());

            // update votes
            socket.emit("vote update", {roomName: $('div.hiddenroomtitle').data('room')});
        });
        socket.on('story error', function(data){
            $('p.errorMessage').html(data.msg);
        });
        // update polls
        socket.on('user joined', function(data){
            socket.emit('vote update', {roomName: $('div.hiddenroomtitle').data('room')});
        });
        socket.on('user left', function(data){
            socket.emit('vote update', {roomName: $('div.hiddenroomtitle').data('room')});
        });

        // story construction helper function
        var constructStoryHtml = function (continuations){
            var storyHtml = $('<div>').addClass('storyText');
            for (var i=0; i<continuations.length; i++){
                var entry = continuations[i];
                storyHtml.append(
                $('<span>')
                    .html(entry.text)
                    .addClass(entry.author.publicid)
                    .attr('title', entry.author.name)
                    // TODO: use assigned user colors
                    .css('background-color', entry.author.color )
                );
            }
            return storyHtml.get(0);
        };


